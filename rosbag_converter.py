# Form implementation generated from reading ui file 'rosbag_converter.ui'
#
# Created by: PyQt6 UI code generator 6.6.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from pathlib import Path
from PyQt6 import QtCore, QtGui, QtWidgets
from converter import Converter
from DataIO import BagDataIO

class Ui_MainWindow(object):

    def __init__(self) -> None:
        self.converter = Converter()
        self.bag = BagDataIO()
        self.pwd = str(Path.cwd())
        self.outdir_ready = False
        self.target_topic = []

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 650)
        MainWindow.setWindowTitle("RosBag Converter")
        
        # Set application style for a modern look
        self.style = """
        QMainWindow {
            background-color: #f5f5f7;
        }
        QLabel {
            color: #333333;
        }
        QPushButton {
            background-color: #007aff;
            color: white;
            border-radius: 4px;
            padding: 5px 10px;
            font-weight: bold;
        }
        QPushButton:hover {
            background-color: #0069d9;
        }
        QCheckBox {
            spacing: 5px;
        }
        QProgressBar {
            border: 1px solid #cccccc;
            border-radius: 5px;
            text-align: center;
            background-color: #f0f0f0;
        }
        QProgressBar::chunk {
            background-color: #4cd964;
            border-radius: 5px;
        }
        """
        MainWindow.setStyleSheet(self.style)

        # Central widget and main layout
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.mainLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.mainLayout.setContentsMargins(20, 20, 20, 20)
        self.mainLayout.setSpacing(15)

        # Input file section
        self.inputGroup = QtWidgets.QGroupBox("Input ROS Bag File")
        self.inputLayout = QtWidgets.QHBoxLayout(self.inputGroup)
        
        self.selected_bag = QtWidgets.QLabel("")
        self.selected_bag.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.selected_bag.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.selected_bag.setMinimumHeight(30)
        
        self.select_bag = QtWidgets.QPushButton("Select Bag File")
        self.select_bag.setFixedWidth(120)
        self.select_bag.clicked.connect(self._showOpenDialog)
        
        self.inputLayout.addWidget(self.selected_bag)
        self.inputLayout.addWidget(self.select_bag)
        
        # Output directory section
        self.outputGroup = QtWidgets.QGroupBox("Output Directory")
        self.outputLayout = QtWidgets.QHBoxLayout(self.outputGroup)
        
        self.selected_outdir = QtWidgets.QLabel("")
        self.selected_outdir.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.selected_outdir.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.selected_outdir.setMinimumHeight(30)
        
        self.select_output = QtWidgets.QPushButton("Select Directory")
        self.select_output.setFixedWidth(120)
        self.select_output.clicked.connect(self._showOutputDialog)
        
        self.outputLayout.addWidget(self.selected_outdir)
        self.outputLayout.addWidget(self.select_output)
        
        # Time conversion options
        self.timeGroup = QtWidgets.QGroupBox("Time Conversion Options")
        self.timeLayout = QtWidgets.QHBoxLayout(self.timeGroup)
        
        self.gnssckb = QtWidgets.QCheckBox("GPST2SoW")
        self.gnssckb.clicked.connect(self._handleGnssCheckbox)
        
        self.unixckb = QtWidgets.QCheckBox("UnixT2SoW")
        self.unixckb.clicked.connect(self._handleUnixCheckbox)
        
        self.timeLayout.addWidget(self.gnssckb)
        self.timeLayout.addWidget(self.unixckb)
        self.timeLayout.addStretch()
        
        # Topics section - split into two columns
        self.contentLayout = QtWidgets.QHBoxLayout()
        
        # Left side: Topics
        self.topicsGroup = QtWidgets.QGroupBox("Available Topics")
        self.topicsLayout = QtWidgets.QVBoxLayout(self.topicsGroup)
        
        self.topicsScrollArea = QtWidgets.QScrollArea()
        self.topicsScrollArea.setWidgetResizable(True)
        self.topicsScrollArea.setMinimumHeight(300)
        
        self.topicsContainer = QtWidgets.QWidget()
        self.verticalLayout = QtWidgets.QVBoxLayout(self.topicsContainer)
        self.verticalLayout.setContentsMargins(5, 5, 5, 5)
        self.verticalLayout.setSpacing(2)
        self.verticalLayout.addStretch()
        
        self.topicsScrollArea.setWidget(self.topicsContainer)
        self.topicsLayout.addWidget(self.topicsScrollArea)
        
        # Topic selection buttons
        self.topicButtonsLayout = QtWidgets.QHBoxLayout()
        
        self.selectAllButton = QtWidgets.QPushButton("Select All")
        self.selectAllButton.clicked.connect(self._selectAllTopics)
        
        self.deselectAllButton = QtWidgets.QPushButton("Deselect All")
        self.deselectAllButton.clicked.connect(self._deselectAllTopics)
        
        self.topicButtonsLayout.addWidget(self.selectAllButton)
        self.topicButtonsLayout.addWidget(self.deselectAllButton)
        self.topicsLayout.addLayout(self.topicButtonsLayout)
        
        # Right side: Instructions
        self.instructionsGroup = QtWidgets.QGroupBox("Instructions")
        self.instructionsLayout = QtWidgets.QVBoxLayout(self.instructionsGroup)
        
        self.instruction = QtWidgets.QLabel()
        self.instruction.setWordWrap(True)
        self.instruction.setTextFormat(QtCore.Qt.TextFormat.RichText)
        self.instruction.setText("""
        <p style="font-size:11pt">
        <b>How to use:</b><br><br>
        1. Select the target bag file<br><br>
        2. Select the output directory for conversion results<br><br>
        3. Select the topics you want to convert<br><br>
        4. Choose time conversion option (if needed)<br><br>
        5. Click "Convert" to begin processing
        </p>
        """)
        
        self.instructionsLayout.addWidget(self.instruction)
        
        # Add both sides to content layout
        self.contentLayout.addWidget(self.topicsGroup, 3)
        self.contentLayout.addWidget(self.instructionsGroup, 2)
        
        # Progress bar
        self.progressGroup = QtWidgets.QGroupBox("Progress")
        self.progressLayout = QtWidgets.QVBoxLayout(self.progressGroup)
        
        self.progressBar = QtWidgets.QProgressBar()
        self.progressBar.setTextVisible(True)
        self.progressBar.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.progressBar.setFormat("%p% - %v / %m")
        self.progressBar.setValue(0)
        
        self.statusLabel = QtWidgets.QLabel("Ready")
        self.statusLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        
        self.progressLayout.addWidget(self.progressBar)
        self.progressLayout.addWidget(self.statusLabel)
        
        # Button box
        self.buttonLayout = QtWidgets.QHBoxLayout()
        self.buttonLayout.addStretch()
        
        self.convertButton = QtWidgets.QPushButton("Convert")
        self.convertButton.setFixedSize(120, 35)
        self.convertButton.clicked.connect(self._onAccepted)
        
        self.cancelButton = QtWidgets.QPushButton("Cancel")
        self.cancelButton.setFixedSize(120, 35)
        self.cancelButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        
        self.buttonLayout.addWidget(self.convertButton)
        self.buttonLayout.addWidget(self.cancelButton)
        
        # Add all sections to main layout
        self.mainLayout.addWidget(self.inputGroup)
        self.mainLayout.addWidget(self.outputGroup)
        self.mainLayout.addWidget(self.timeGroup)
        self.mainLayout.addLayout(self.contentLayout)
        self.mainLayout.addWidget(self.progressGroup)
        self.mainLayout.addLayout(self.buttonLayout)
        
        # Set central widget
        MainWindow.setCentralWidget(self.centralwidget)
        
        # Status bar
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

    def _selectAllTopics(self):
        for checkbox in self.checkBox:
            checkbox.setChecked(True)
        self._check_target_topic()
        
    def _deselectAllTopics(self):
        for checkbox in self.checkBox:
            checkbox.setChecked(False)
        self._check_target_topic()

    def _showOpenDialog(self):
        bag_path = QtWidgets.QFileDialog.getOpenFileName(None, 'Select Bag File', self.pwd, 'ROS Bag Files (*.bag)')
        if bag_path[0]:
            self.selected_bag.setText(bag_path[0])
            self.statusLabel.setText("Opening bag file...")
            self.progressBar.setRange(0, 0)  # Indeterminate progress
            
            # Use QApplication.processEvents to keep UI responsive
            QtWidgets.QApplication.processEvents()
            
            # Open the bag file
            self.bag.open(bag_path[0])
            
            # Update topic list
            self._set_avaliable_topics(self.bag.get_topics())
            
            # Reset progress bar
            self.progressBar.setRange(0, 100)
            self.progressBar.setValue(0)
            self.statusLabel.setText("Bag file loaded successfully")

    def _showOutputDialog(self):
        out_dir = QtWidgets.QFileDialog.getExistingDirectory(None, 'Select Output Directory', self.pwd, options=QtWidgets.QFileDialog.Option.ShowDirsOnly)
        if out_dir:
            target_dir = 'bag_output'
            out_dir = Path(out_dir) / target_dir
            self.selected_outdir.setText(out_dir.as_posix())
            self.bag.set_outdir_path(out_dir)
            self.outdir_ready = True
            self.statusLabel.setText("Output directory set")

    def _set_avaliable_topics(self, topics: list):
        self.target_topic = list()
        
        # Clear existing checkboxes
        for i in reversed(range(self.verticalLayout.count()-1)):  # -1 to keep the stretch
            widget = self.verticalLayout.itemAt(i).widget()
            if widget:
                widget.setParent(None)
        
        # Create new checkboxes
        self.checkBox = list()
        for i, text in enumerate(topics):
            checkbox = QtWidgets.QCheckBox(text)
            checkbox.setObjectName(text)
            checkbox.clicked.connect(lambda state, text=text: self._set_processed_topic_list(state, text))
            self.checkBox.append(checkbox)
            self.verticalLayout.insertWidget(i, checkbox)

    def _set_processed_topic_list(self, state, topic_text):
        if state:
            if topic_text not in self.target_topic:
                self.target_topic.append(topic_text)
        else:
            if topic_text in self.target_topic:
                self.target_topic.remove(topic_text)

    def _handleGnssCheckbox(self):
        if self.gnssckb.isChecked():
            self.unixckb.setChecked(False)
            self.bag.timeconvert = 1
        else:
            self.bag.timeconvert = 0
    
    def _handleUnixCheckbox(self):
        if self.unixckb.isChecked():
            self.gnssckb.setChecked(False)
            self.bag.timeconvert = 2
        else:
            self.bag.timeconvert = 0

    def setTimeConvert(self):
        # This method is kept for backward compatibility
        if self.gnssckb.isChecked():
            self.bag.timeconvert = 1
            return True
        elif self.unixckb.isChecked():
            self.bag.timeconvert = 2
            return True
        else:
            self.bag.timeconvert = 0
            return True

    def _onAccepted(self):
        # Update target topics based on checkbox state
        self._check_target_topic()
        
        # Validate output directory
        if not self._check_output():
            return None
            
        # Check if any topics are selected
        if not self.target_topic:
            QtWidgets.QMessageBox.warning(None, "No Topics Selected", "Please select at least one topic to convert")
            return None
            
        # Configure progress dialog
        self.statusLabel.setText("Processing...")
        self.progressBar.setValue(0)
        duration = self.bag.t_end - self.bag.t_start
        self.progressBar.setRange(0, int(duration))
        
        # Disable UI elements during processing
        self._setUIEnabled(False)
        
        # Process messages
        self._processed_msgs()

    def _setUIEnabled(self, enabled):
        """Enable or disable UI elements during processing"""
        self.convertButton.setEnabled(enabled)
        self.select_bag.setEnabled(enabled)
        self.select_output.setEnabled(enabled)
        self.gnssckb.setEnabled(enabled)
        self.unixckb.setEnabled(enabled)
        self.selectAllButton.setEnabled(enabled)
        self.deselectAllButton.setEnabled(enabled)
        
        # Enable/disable all topic checkboxes
        for checkbox in self.checkBox:
            checkbox.setEnabled(enabled)
    
    def _check_output(self):
        if not self.outdir_ready:
            QtWidgets.QMessageBox.warning(None, "No Output Directory", "Please select the output directory")
            return False
        self.bag.check_output(self.target_topic)
        return True

    def _check_target_topic(self):
        self.target_topic.clear()
        for checkbox in self.checkBox:
            if checkbox.isChecked():
                self.target_topic.append(checkbox.text())

    def _processed_msgs(self):
        cancel_requested = False
        total_msgs = 0
        processed_msgs = 0
        update_frequency = 50  # Only update UI every 50 messages
        
        try:
            # First pass to count total messages - with optimized UI updates
            msg_iterator = self.bag.get_msgs(self.target_topic)
            msgs_to_process = []
            
            # Store messages to process with less frequent UI updates
            self.statusLabel.setText("Counting messages...")
            for msg_data in msg_iterator:
                total_msgs += 1
                msgs_to_process.append(msg_data)
                # Update UI less frequently
                if total_msgs % 500 == 0:
                    self.statusLabel.setText(f"Counting: {total_msgs}")
                    QtWidgets.QApplication.processEvents()
            
            # Set status once after counting
            self.statusLabel.setText(f"Processing {total_msgs} messages...")
            
            # Process stored messages
            if total_msgs > 0:
                self.progressBar.setRange(0, 100)  # Use percentage instead of message count
                last_percent = -1  # Track last displayed percentage
                
                for topic, msg, t in msgs_to_process:
                    processed_msgs += 1
                    
                    # Process message if it's in the target topics
                    if topic in self.target_topic:
                        data = self.converter.convert(msg)
                        self.bag.data_output(data)
                    
                    # Update progress bar only when percentage changes
                    current_percent = int((processed_msgs / total_msgs) * 100)
                    if current_percent != last_percent:
                        self.progressBar.setValue(current_percent)
                        last_percent = current_percent
                    
                    # Process events and update status less frequently
                    if processed_msgs % update_frequency == 0:
                        # Simple progress indicator
                        self.statusLabel.setText(f"Converting: {current_percent}%")
                        QtWidgets.QApplication.processEvents()
                        if cancel_requested:
                            break
                
                # Processing completed
                if not cancel_requested:
                    self.progressBar.setValue(100)
                    self.statusLabel.setText("Processing completed successfully!")
                    QtWidgets.QMessageBox.information(None, "Success", f"Successfully processed {processed_msgs} messages")
            else:
                self.statusLabel.setText("No messages to process")
                QtWidgets.QMessageBox.information(None, "No Data", "No messages found to process")
        
        except Exception as e:
            QtWidgets.QMessageBox.critical(None, "Error", f"An error occurred during processing: {str(e)}")
            self.statusLabel.setText("Error during processing")
        
        finally:
            # Close files and re-enable UI
            self.bag.close_file()
            self._setUIEnabled(True)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
